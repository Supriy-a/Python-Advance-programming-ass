def check_score(l):
    sym = { '#' : 5, 'O' : 3, 'X' : 1, '!' : -1, '!!' : -3, '!!!' : -5}
    answer = ''
    for i in l:
        for j in i:
            answer = answer + '+' + "(" + str(sym[j]) + ')'
    print(answer)
    if eval(answer)<0:
        return 0
    else:
        return eval(answer) 


***************************************
check_score([
["#", "!"],
["!!", "X"]
])

***************************
check_score([
["!!!", "O", "!"],
["X", "#", "!!!"],
["!!", "X", "O"]
])
***************************
Q2
def combinations(*args):
    com = 1
    for i in args:
        com = com*i
    return com
    
******************************
combinations(2, 3)
**********************
combinations(3, 7, 4)
*************************
combinations(2, 3, 4, 5)
**************************
combinations(1,2,3,4,5,56,6)

**********************************
def encode_morse(string):
    char_to_dots = {
                    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
                    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
                    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
                    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                    'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
                    '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
                    '6': '-....', '7': '--...', '8': '---..', '9': '----.',
                    '&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
                    ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
                    '-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.'
                    }
    l = []
    string = str(string)
    for i in string:
        for j in i:
            l.append(str(char_to_dots[j]))
    return "".join(l)
********************************************************
encode_morse("EDABBIT CHALLENGE")
********************************************
encode_morse("HELP ME !")
********************************
def prime(n):
    if n==1:
        return False
    elif n==2:
        return True
    else:
        for i in range(2,n):
            if n%i==0:
                return False
        return True  
**************************************
prime(7)
*********************
prime(56963)
**************************
prime(5151512515524)
************************
Q5

def char_position(letter):
    return ord(letter) - 96

def to_boolean_list(s):
    l = []
    for i in s:
        print(char_position(i))
        if char_position(i)%2==0:
            l.append(False)
        else:
            l.append(True)
    return l
*****************************
to_boolean_list("loves")
*******************************
to_boolean_list("deep")
******************************
to_boolean_list("tesh")
