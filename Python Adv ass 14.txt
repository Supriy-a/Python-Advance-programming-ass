1.
def show_the_love(in_list):
    out_list = in_list.copy()
    sum_num = 0
    for ele in range(len(out_list)):
        if out_list[ele] is not min(out_list):
            sum_num += out_list[ele]/4
            out_list[ele] =  out_list[ele]-(out_list[ele]/4)
    out_list[out_list.index(min(out_list))] = sum_num +min(out_list)
    print(f'show_the_love({in_list}) ➞ {out_list}')
            
show_the_love([4, 1, 4])
show_the_love([16, 10, 8])
show_the_love([2, 100])

********************************************************
2.
def letters(s_one,s_two):
    s_one_set = set(s_one)
    s_two_set = set(s_two)
    out_list = []
    out_list.append(''.join(sorted(s_one_set.intersection(s_two_set))))
    out_list.append(''.join(sorted(s_one_set.difference(s_two_set))))
    out_list.append(''.join(sorted(s_two_set.difference(s_one_set)))) 
    print(f'letters{s_one,s_two} ➞ {out_list}')
    
letters("sharp", "soap")
letters("board", "bored")
letters("happiness", "envelope")
letters("kerfuffle", "fluffy")
letters("match", "ham")
************************************************
3.
def pairs(in_list):
    in_list_clone = in_list.copy()
    output = []
    while True:
        if len(in_list) > 0:
            if len(in_list) == 1:
                output.append([in_list[0],in_list.pop(0)])
            else:
                output.append([in_list.pop(0),in_list.pop(-1)])
        else:
            break
    print(f'pairs({in_list_clone}) ➞ {output}')
            
pairs([1, 2, 3, 4, 5, 6, 7])
pairs([1, 2, 3, 4, 5, 6])
pairs([5, 9, 8, 1, 2])
pairs([])
********************************************************
4.
def add_str_nums(in_one,in_two):
    in_one = in_one if len(in_one) > 0 else "0"
    in_two = in_two if len(in_two) > 0 else "0"
    if in_one.isdigit() == False or in_two.isdigit() == False:
        output = -1
    else: 
        output = int(in_one)+int(in_two)
    print(f'add_str_nums{in_one,in_two} ➞ {str(output)}')
        
add_str_nums("4", "5")
add_str_nums("abcdefg", "3")
add_str_nums("1", "")
add_str_nums("1874682736267235927359283579235789257", "32652983572985729")
***************************************************************************************
5.
def unmix(in_string):
    output = ''
    for ele in range(0,len(in_string)-1,2):
        output += in_string[ele+1]+in_string[ele]
        if (len(in_string)%2 != 0 and ele == len(in_string)//2 ):
            output += in_string[-1]       
    print(f'unmix({in_string}) ➞ {output}')

unmix("123456")
unmix("hTsii  s aimex dpus rtni.g")
unmix("badce")
