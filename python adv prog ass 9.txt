def playback_duration(in_time,playback_speed):
    time = in_time.split(":")
    time_in_secs = (3600*int(time[0])+60*int(time[1])+int(time[2]))/playback_speed
    f_time_in_hours = str(int(time_in_secs/3600)) if time_in_secs > 3600 else '00'
    f_time_in_mins = str(int((time_in_secs%3600)/60)) if (time_in_secs)%3600 > 60 else '00'
    f_time_in_secs = str(int((time_in_secs%3600)%60)) if ((time_in_secs)%3600)%60 > 0 else '00'   
    output = f'{f_time_in_hours}:{f_time_in_mins}:{f_time_in_secs}'
    print(f'playback_duration{in_time, playback_speed} ➞ {output}')
    
playback_duration("00:30:00", 2)
playback_duration("01:20:00", 1.5)
playback_duration("51:20:09", 0.5) 

*******************************************
def pile_of_cubes(in_volume):
    out_volume = 0
    output = 0
    for cube in range(1,in_volume):
        out_volume += pow(cube,3)
        if in_volume <= out_volume:
            output = cube if in_volume == out_volume else None
            break
    print(f'pile_of_cubes({in_volume}) ➞ {output}')

pile_of_cubes(1071225)
pile_of_cubes(4183059834009)
pile_of_cubes(16)
***************************************
def find_fulcrum(in_list):
    output = -1
    for ele in in_list:
        index_of_ele =in_list.index(ele)
        if sum(in_list[:index_of_ele]) == sum(in_list[index_of_ele+1:]):
            output = ele
            break
    print(f'find_fulcrum({in_list}) ➞ {output}')
        
find_fulcrum([3, 1, 5, 2, 4, 6, -1])
find_fulcrum([1, 2, 4, 9, 10, -10, -9, 3])
find_fulcrum([9, 1, 9])
find_fulcrum([7, -1, 0, -1, 1, 1, 2, 3])
find_fulcrum([8, 8, 8, 8])
***************************************
def sock_merchant(in_list):
    paired_socks = {}
    output = 0
    for ele in in_list:
        if ele in paired_socks:
            paired_socks[ele]+=1
        else:
            paired_socks[ele]=1
    for pair in paired_socks.values():
        output += pair//2
    print(f'sock_merchant({in_list}) ➞ {output}')
    

sock_merchant([10, 20, 20, 10, 10, 30, 50, 10, 20])
sock_merchant([50, 20, 30, 90, 30, 20, 50, 20, 90])
sock_merchant([])
******************************
import re
def negative_sum(in_string):
    pattern = '-\d+'
    output = sum([int(ele) for ele in re.findall(pattern,in_string)])
    print(f'negative_sum("{in_string}") ➞ {output}')
    
negative_sum("-12 13%14&-11")
negative_sum("22 13%14&-11-22 13 12")