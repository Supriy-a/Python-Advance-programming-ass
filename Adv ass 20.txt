1.
def secret(in_string):
    in_string_clone = in_string
    in_string = in_string.split(".")
    output = f'<{in_string[0]} class="{" ".join(in_string[1:])}"></{in_string[0]}>'
    print(f'secret("{in_string_clone}") ➞ {output}')
    
secret("p.one.two.three")
secret("p.one")
secret("p.four.five")
*****************************
2.
import re
def count_lone_ones(in_num):
    pattern = r"(?<!1)1(?!1)" 
    output = re.findall(pattern,str(in_num))
    print(f'coint_lone_ones({in_num}) ➞ {len(output)}')
    
count_lone_ones(101)
count_lone_ones(1191)
count_lone_ones(1111)
count_lone_ones(462)
****************************************
3.
def printGrid(in_one,in_two):
    output = []
    for ele_1 in range(in_one):
        temp = []
        for ele_2 in range(in_two):
            temp.append(ele_1+(in_one*ele_2)+1)
        output.append(temp)
    print(f'printGrid{in_one,in_two} ➞ {output}')
    
printGrid(3, 6)
printGrid(5, 3)  
printGrid(4, 1)
*************************************
4.
def min_miss_pos(in_list):
    in_list_clone = in_list.copy()
    in_list = sorted(in_list)
    output = -1
    for ele in range(1,max(in_list)+1):
        if ele not in in_list:
            output = ele
            break
    print(f'min_miss_pos({in_list_clone}) ➞ {in_list} ➞ {output}')
    
min_miss_pos([-2, 6, 4, 5, 7, -1, 1, 3, 6, -2, 9, 10, 2, 2])
min_miss_pos([5, 9, -2, 0, 1, 3, 9, 3, 8, 9])
min_miss_pos([0, 4, 4, -1, 9, 4, 5, 2, 10, 7, 6, 3, 10, 9])
******************************************************************
5.
def pizza_points(in_dict,min_order,min_price):
    output = []
    for customer in in_dict.keys():
        if len([order_price for order_price in in_dict[customer] if order_price > min_price]) > min_order:
            output.append(customer)
    print(f'pizza_points{"customers",min_order,min_price} ➞ {output}')

customers = {
  "Batman": [22, 30, 11, 17, 15, 52, 27, 12],
  "Spider-Man": [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]
}
    
pizza_points(customers, 5, 20)
pizza_points(customers, 3, 10)
pizza_points(customers, 5, 100)