1.
import re
class Smoothie:
    ingredients_price = {
        'Strawberries':1.50,
        'Banana':0.50,
        'Mango':2.50,
        'Blueberries':1.00,
        'Raspberries':1.00,
        'Apple':1.75,
        'Pineapple':3.50
    }
    def __init__(self,ingredients):
        self.ingredients = ingredients
        self.cost = 0
    def get_cost(self):
        for ele in self.ingredients:
            if ele in Smoothie.ingredients_price:
                self.cost += round(Smoothie.ingredients_price.get(ele,0),2)
        return '$'+str(self.cost)
    def get_price(self):
        self.price = round((self.cost*1.5)+(self.cost),2)
        return '$'+str(self.price)
    def get_name(self):
        self.name = re.sub('berries','berry',' '.join(sorted(self.ingredients)))
        self.name = self.name+' Smoothie' if len(self.ingredients) == 1 else self.name+' Fusion'
        return self.name

s1 = Smoothie(["Banana"])
print(f's1.ingredients ➞ {s1.ingredients}')
print(f's1.get_cost() ➞ "{s1.get_cost()}"')
print(f's1.get_price() ➞ "{s1.get_price()}"')
print(f's1.get_name() ➞ "{s1.get_name()}"')

s2 = Smoothie(["Raspberries", "Strawberries", "Blueberries"])
print(f's2.ingredients ➞ {s2.ingredients}')
print(f's2.get_cost() ➞ "{s2.get_cost()}"')
print(f's2.get_price() ➞ "{s2.get_price()}"')
print(f's2.get_name() ➞ "{s2.get_name()}"')
**********************************************************
2.
class Testpaper:
    def __init__(self,subject,markscheme,pass_mark):
        self.subject = subject
        self.markscheme = markscheme
        self.pass_mark = pass_mark
        
class Student:
    def __init__(self):
        self.tests_taken = "No tests taken"
    def take_test(self,paper_name,student_response):
        correct_responses = 0
        for ele in range(len(paper_name.markscheme)):
            if paper_name.markscheme[ele] == student_response[ele]:
                correct_responses +=1
        ach_pass_mark = int(correct_responses/len(paper_name.markscheme)*100)
        needed_pass_mark = int(paper_name.pass_mark.split("%")[0])
        if self.tests_taken == 'No tests taken':
            self.tests_taken = {}
        if ach_pass_mark >= needed_pass_mark:
            self.tests_taken[paper_name.subject] = f"Passed! ({str(ach_pass_mark)}%)"
        else:
            self.tests_taken[paper_name.subject] = f'Failed! ({str(ach_pass_mark)}%)'
        
paper1 = Testpaper("Maths", ["1A", "2C", "3D", "4A", "5A"], "60%")  
paper2 = Testpaper("Chemistry", ["1C", "2C", "3D", "4A"], "75%")  
paper3 = Testpaper("Computing", ["1D", "2C", "3C", "4B", "5D", "6C", "7A"], "75%")       

student1 = Student()   
student2 = Student()

print(f'student1.tests_taken ➞ "{student1.tests_taken}"')
student1.take_test(paper1, ["1A", "2D", "3D", "4A", "5A"])
print(f'student1.tests_taken ➞ {student1.tests_taken}')

student2.take_test(paper2, ["1C", "2D", "3A", "4C"])
student2.take_test(paper3, ["1A", "2C", "3A", "4C", "5D", "6C", "7B"])
print(f'student2.tests_taken ➞ {student2.tests_taken}')
***************************************************************
3.
class Train:
    def __init__(self,destination_list,expected_time):
        self.destination_list = destination_list
        self.expected_time = expected_time

def manage_delays(train_obj,destination_point,delay):
    if destination_point in train_obj.destination_list:
        ex_time = train_obj.expected_time.split(":")
        new_ex_time = str((int(ex_time[0])*60+int(ex_time[1])+int(delay))//60)+':'+str((int(ex_time[0])*60+int(ex_time[1])+int(delay))%60)
        train_obj.expected_time = new_ex_time

trains = [
  Train(["Townsville", "Suburbia", "Urbantska"], "13:04"),
  Train(["Farmsdale", "Suburbia", "Lakeside Valley"], "13:20"),
  Train(["Suburbia", "Townsville", "Lakeside Valley"], "13:22")
]

for t in trains:
    manage_delays(t, "Lakeside Valley", 60)
        
print(f'trains[0].expected_time ➞ "{trains[0].expected_time}"')    
print(f'trains[1].expected_time ➞ "{trains[1].expected_time}"')    
print(f'trains[2].expected_time ➞ "{trains[2].expected_time}"')
************************************************************************
4.class minecraft:
    def __init__(self,tracks):
        self.tracks = tracks
        
def mine_run(tracks):
    mine_vel = 0  
    output = 0
    for ele in range(len(tracks)):
        if tracks[ele] == '-->':
            if mine_vel+2.67 >= 8: mine_vel = 8 # resetted to max mine_val
            else: mine_vel +=2.67
        elif tracks[ele] == '<-->': continue
        elif tracks[ele] == '<--':
            if mine_vel-2.67 <= 0: output = True if ele == len(tracks)-1 else ele; break
            else: mine_vel -=2.67
        else:
            if mine_vel-1 <= 0: output = True if ele == len(tracks)-1 else ele; break
            else: mine_vel -=1        
    return output

mine_track_1 = minecraft(["-->", "-->", "-->", "<--", "<--", "<--"])
print(f'mine_run({mine_track_1.tracks}) ➞ {mine_run(mine_track_1.tracks)}')
mine_track_2 = minecraft(["-->", "<--", "-->", "-->", "<-->", "---"])
print(f'mine_run({mine_track_2.tracks}) ➞ {mine_run(mine_track_2.tracks)}')
*********************************************************************************
5
def intersecting(rectangle1, rectangle2):
    output = False
    if (rectangle2.y-rectangle1.y == rectangle1.height) or (rectangle2.y-rectangle1.y + rectangle1.height == rectangle2.height):
        output = True
    print(f'intersecting{rectangle1.__dict__.values(),rectangle2.__dict__.values()} ➞ {output}')

class Rectangle:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height

a = Rectangle(10, 20, 100, 20)
b = Rectangle(10, 40, 15, 20)
c = Rectangle(50, 50, 20, 30)
intersecting(a, b)
intersecting(a, c)
intersecting(b, c)