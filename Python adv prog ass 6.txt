def find_the_difference(in_one,in_two):
    in_two_temp = list(in_two)
    for ele in in_one:
        if ele in in_two_temp:
            in_two_temp.pop(in_two_temp.index(ele))
    output = ','.join(in_two_temp)
    print(f'find_the_difference{in_one,in_two} ➞ {output}')

find_the_difference("abcd", "abcde")
find_the_difference("", "y")
find_the_difference("ae", "aea")

******************************************
from collections import OrderedDict
def count_datatypes(*args):
    output = OrderedDict({'int':0,'str':0,'bool':0,'list':0,'tuple':0,'dict':0})
    for ele in args:
        output[type(ele).__name__] += 1
    print(f'count_datatypes{args}  ➞  {list(output.values())}')
    
count_datatypes(1, 45, "Hi", False)   
count_datatypes([10, 20], ("t", "Ok"), 2, 3, 1)
count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23)
count_datatypes(4, 21, ("ES", "EN"), ("a", "b"), False, [1, 2, 3], [4, 5, 6])

************************************************************************
# Approach 1 Using Lists
def fib_str_one(in_num,in_list):
    out_list = in_list.copy()
    if in_num > 2:
        for ele in range(2,in_num):
            out_list.append(out_list[-1]+out_list[-2])
    print(f'fib_str_one{in_num, in_list} ➞ {", ".join(out_list)}')

# Approach 2 Without Using Lists
def fib_str_two(in_num,in_list):
    back_one, back_two = in_list[-1],in_list[-2]
    output=", ".join(in_list)
    if in_num > 2:
        for ele in range(2,in_num):
            temp = back_one+back_two
            output += ", "+temp
            back_one = back_two
            back_two = temp
    print(f'fib_str_two{in_num, in_list} ➞ {output}')
    
fib_str_one(3, ["j", "h"]) 
fib_str_one(5, ["e", "a"])
fib_str_one(6, ["n", "k"])
print()
fib_str_two(3, ["j", "h"]) 
fib_str_two(5, ["e", "a"])
fib_str_two(6, ["n", "k"])
****************************************************************
def ones_threes_nines(in_num):
    in_num_clone = in_num
    answer = {'nines':0,'threes':0,'ones':0}
    if in_num > 0 and in_num < 26:
        while in_num != 0:
            if in_num >= 9:
                in_num -= 9
                answer['nines'] += 1
            elif in_num >= 3:
                in_num -= 3
                answer['threes'] += 1
            elif in_num >= 1:
                in_num -=1
                answer['ones'] +=1
    print(f"ones_threes_nines({in_num_clone}) ➞ \"nines:{answer['nines']}, threes:{answer['threes']}, ones:{answer['ones']}\"")
    
ones_threes_nines(10) 
ones_threes_nines(15)
ones_threes_nines(22)

********************************************************************
# Approach 1
def fib_one(in_num):
    if in_num < 1:
        print("Minimum two digits are required to generate a fibonacci sequence")
    else:
        output = [0,1]
        for ele in range(2,in_num+1):
            output.append(output[-1]+output[-2])
        print(f'fib_one({in_num}) ➞ {output[-1]}')

# Approach 2
def fib_two(in_num):
    back_one,back_two = 1,0
    for ele in range(2,in_num+1):
        temp = back_one+back_two
        back_two = back_one
        back_one = temp
    print(f'fib_two({in_num}) ➞ {back_one}')

fib_one(6)
fib_one(1)
fib_one(2)
print()
fib_two(6)
fib_two(1)
fib_two(2)
